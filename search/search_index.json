{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Try New Relic with Django","text":"<p>This simple Django project is an excellent template for your future projects.  It includes everything you need to quickly set up a quality technology stack and start developing your web application\u2019s business logic, skipping all the complex deployment issues at an early stage.</p> <p>Star this project if it\u2019s what you were looking for! \u2b50\ufe0f</p>"},{"location":"#technology-stack","title":"Technology stack","text":"<p>The technology stack used includes:</p> <ul> <li><code>Python</code> ver. 3.11</li> <li><code>Django</code> ver. 4.2</li> <li><code>PostgreSQL</code> ver. 15</li> <li><code>Gunicorn</code> ver. 22.0</li> <li><code>Traefik</code> ver. 2.9</li> <li><code>Docker</code> and <code>Docker Compose</code></li> </ul> <p>Nothing extra, only the essentials! You can easily add everything else yourself by expanding the existing configuration files:</p> <ul> <li>requirements.txt</li> <li>docker-compose.yml</li> <li>pytest.ini</li> <li>and others\u2026</li> </ul> <p>This project includes a simple Django application from the official Django tutorial - \u201ca basic poll application\u201d. You can safely delete this application at any time. This application is present in the project as an example, used for testing and debugging.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>A well-configured Django project, with individual settings that can be changed using environment variables</li> <li>Building and debugging a Django project in Docker</li> <li>Integrated pytest and coverage for robust testing and code quality assurance \u2705</li> <li>A ready-made docker-compose file that brings together Postgres - Django - Gunicorn - Traefik</li> <li>Serving static files (and user-uploaded files) with Nginx</li> <li>Automatic database migration and static file collection when starting or restarting the Django container</li> <li>Automatic creation of the first user in Django with a default login and password</li> <li>Automatic creation and renewal of Let\u2019s Encrypt certificate \ud83d\udd25</li> <li>Minimal dependencies</li> <li>Everything is set up as simply as possible - just a couple of commands in the terminal, and you have a working project \ud83d\ude80</li> </ul>"},{"location":"#how-to-start","title":"How to start","text":""},{"location":"#for-development-on-your-computer","title":"For development on your computer","text":"<ol> <li> <p>Clone the repository to your computer and go to the <code>django-docker-template</code> directory:     <code>console     git clone https://github.com/Ryohei-Caulked/django-docker-template-with-newrelic.git     cd django-docker-template-with-newrelic</code></p> </li> <li> <p>Build the Docker container image with Django:     <code>console     docker build -t django-docker-with-newrelic:master .</code></p> </li> <li> <p>Create the first superuser:     <code>console     docker run -it --rm -v sqlite:/sqlite django-docker-with-newrelic:master python manage.py createsuperuser</code></p> </li> <li> <p>Run the Django development server container:</p>"},{"location":"#linux","title":"Linux","text":"<p><code>console docker run -it --rm -p 8000:8000 -v sqlite:/sqlite -v $(pwd)/website:/usr/src/website django-docker-with-newrelic:master python manage.py runserver 0.0.0.0:8000</code></p>"},{"location":"#windows","title":"Windows","text":"<p><code>console docker run -it --rm -p 8000:8000 -v sqlite:/sqlite -v .\\website:/usr/src/website django-docker-with-newrelic:master python manage.py runserver 0.0.0.0:8000</code></p> <p>Now you can go to http://127.0.0.1:8000/admin/ in your browser. Go to the Django admin panel and try updating the server code \u201con the fly\u201d. Everything works just like if you were running the Django development server outside the container.</p> <p>Note that we mount the directory with your source code inside the container, so you can work with the project in your IDE, and changes will be visible inside the container, and the Django development server will restart itself. </p> <p> SQLite Usage Details <p>Another important point is the use of SQLite3 instead of Postgres, because Postgres is not deployed until Django is run within a Docker Compose environment. In our example, we add a volume named <code>sqlite</code>. This data is stored persistently and does not disappear between restarts of the Django development server. However, if you have a second similar project, it would be better to change the volume name from <code>sqlite</code> to something else so that the second project uses its own copy of the database. For example:</p> <p><code>console docker run -it --rm -p 8000:8000 -v another_sqlite:/sqlite -v $(pwd)/website:/usr/src/website django-docker-template-with-newrelic:master python manage.py runserver 0.0.0.0:8000</code></p> <p>To better understand how volumes work in Docker, refer to the official documentation. </p> <li> <p>Run tests with pytest and coverage \u2705:     <code>console     docker run --rm django-docker-template-with-newrelic:master ./pytest.sh</code>     The pytest.sh script runs tests using pytest and coverage. As a result, you will see an output like this in the terminal:     ```console     ================== test session starts =====================================     platform linux \u2013 Python 3.11.7, pytest-7.4.4, pluggy-1.3.0     django: version: 4.2.9, settings: website.settings (from ini)     rootdir: /usr/src/website     configfile: pytest.ini     plugins: django-4.7.0     collected 10 items</p> <p>polls/tests.py .......... [100%]</p> <p>================== 10 passed in 0.19s ====================================== Name                                       Stmts   Miss  Cover   Missing</p> <p>polls/init.py                              0      0   100% polls/admin.py                                12      0   100% polls/apps.py                                  4      0   100% polls/migrations/0001_initial.py               6      0   100% polls/migrations/0002_question_upload.py       4      0   100% polls/migrations/init.py                   0      0   100% polls/models.py                               20      2    90%   15, 33 polls/tests.py                                57      0   100% polls/urls.py                                  4      0   100% polls/views.py                                28      8    71%   39-58 website/init.py                            6      0   100% website/settings.py                           52      2    96%   94, 197 website/urls.py                                6      0   100%</p> <p>TOTAL                                        199     12    94% ```</p> <p>If you don\u2019t want to use pytest (for some reason), you can run the tests without pytest using the command below: <code>console docker run --rm django-docker-template-with-newrelic:master python manage.py test</code></p> </li> <li> <p>Interactive shell with the Django project environment:     <code>console     docker run -it --rm -v sqlite:/sqlite django-docker-template-with-newrelic:master python manage.py shell</code></p> </li> <li> <p>Start all services locally (Postgres, Gunicorn, Traefik) using docker-compose:     <code>console     docker compose -f docker-compose.debug.yml up</code></p> </li> <p>Enjoy watching the lines run in the terminal \ud83d\udda5\ufe0f  And after a few seconds, open your browser at http://127.0.0.1/admin/. The superuser with the login and password <code>admin/admin</code> is already created, welcome to the Django admin panel.</p> <p>Django is still in Debug mode! You can work in your IDE, write code, and immediately see changes inside the container. However, you are currently using Traefik and Postgres. You can also add Redis or MongoDB, and all of this will work in your development environment. This is very convenient.</p> <p>Between Docker Compose restarts, your database data and media files uploaded to the server will be preserved because they are stored in special volumes that are not deleted when containers are restarted.</p>"},{"location":"#to-delete-all-containers-images-and-database","title":"To delete all containers, images and database","text":"<p>If you want to delete everything, the command below will stop all containers, remove them and their images.</p> <pre><code>docker compose down --remove-orphans --rmi local\n</code></pre> <p>To delete the Postgre database as well, add the <code>-v</code> flag to the command:</p> <pre><code>docker compose down --remove-orphans --rmi local -v\n</code></pre>"},{"location":"#django-settings","title":"Django settings","text":"<p>Some Django settings from the <code>settings.py</code> file are stored in environment variables. You can easily change these settings in the <code>.env</code> file. This file does not contain all the necessary settings, but many of them. Add additional settings to environment variables if needed.</p> <p>It is important to note the following: never store sensitive settings such as DJANGO_SECRET_KEY or DJANGO_EMAIL_HOST_PASSWORD in your repository! Docker allows you to override environment variable values from additional files, the command line, or the current session. Store passwords and other sensitive information separately from the code and only connect this information at system startup.</p>"},{"location":"#monitoring","title":"Monitoring","text":""},{"location":"#monitoring-django-app-on-new-relic-dashboard","title":"Monitoring Django App on New Relic dashboard","text":"<p>Let\u2019s monitor your app on New Relic like this! </p> <ol> <li>Create your New Relic account for free</li> </ol> <p>From New Relic sign-up page, create your new account for free. Only your Email address is necessary. Then, you have to verify your address by an email from noreply@newrelic.com</p> <ol> <li> <p>Generate and copy the key</p> <p>At the first view of your account page, click \u201cGenerate and copy license key\u201d. You can copy your license key* to the clip boad. (* 40 chars like \u201c1234567890qwertyuiopasdfghjklZXCVBNM1234\u201d)</p> <p></p> </li> <li> <p>Insert your key to newrelic.ini file</p> </li> </ol> <p>Replace INSERT_YOUR_LICENSE_KEY to your license key.</p> <pre><code>**/django-docker-template/website/newrelic.ini**\n\n```diff\n[newrelic]\napp_name = django-with-newrelic\n- license_key = INSERT_YOUR_LICENSE_KEY\n+ license_key = 1234567890qwertyuiopasdfghjklZXCVBNM1234\n```\n</code></pre> <ol> <li> <p>Rebuild the container image to update the key info in newrelic.ini.     <code>console     docker build -t django-docker-with-newrelic:master .</code></p> </li> <li> <p>Rerun the Django development server container:</p> <p>*If the prior container is running, please stop it before running this command.</p> </li> <li> <p>Login your New Relic dashboard and open \u201cAPM &amp; Services\u201d. You can access to your app monitoring views.</p> <p></p> <p></p> </li> </ol>"},{"location":"#linux_1","title":"Linux","text":"<p><code>console docker run -it --rm -p 8000:8000 -v sqlite:/sqlite -v $(pwd)/website:/usr/src/website django-docker-with-newrelic:master python manage.py runserver 0.0.0.0:8000</code></p>"},{"location":"#windows_1","title":"Windows","text":"<p><code>console docker run -it --rm -p 8000:8000 -v sqlite:/sqlite -v .\\website:/usr/src/website django-docker-with-newrelic:master python manage.py runserver 0.0.0.0:8000</code></p>"},{"location":"#for-deployment-on-a-server","title":"For deployment on a server","text":""},{"location":"#prerequisite","title":"Prerequisite","text":"<p>For the Let\u2019s Encrypt HTTP challenge you will need:</p> <ul> <li>A publicly accessible host allowing connections on port <code>80</code> &amp; <code>443</code> with docker &amp; docker-compose installed. A virtual machine in any cloud provider can be used as a host.</li> <li>A DNS record with the domain you want to expose pointing to this host.</li> </ul>"},{"location":"#steps-on-a-server","title":"Steps on a server","text":"<ol> <li> <p>Clone the repository on your host and go to the <code>django-docker-template</code> directory:     <code>console     git clone https://github.com/Ryohei-Caulked/django-docker-template-with-newrelic.git     cd django-docker-template-with-newrelic</code></p> </li> <li> <p>Configure as described in the Django settings section or leave everything as is.</p> </li> <li> <p>Run, specifying your domain:     <code>console     MY_DOMAIN=your.domain.com docker compose -f docker-compose.yml -f docker-compose.tls.yml up -d</code></p> <p>It will take a few seconds to start the database, migrate, collect static files, and obtain a Let\u2019s Encrypt certificate. So wait a little and open https://your.domain.com in your browser. Your server is ready to work \ud83c\udfc6 </p> <p>Don\u2019t worry about renewing the Let\u2019s Encrypt certificate, it will happen automatically.</p> </li> <li> <p>After running the containers, you can execute manage.py commands using this format:     ```console     docker compose exec django python manage.py check \u2013deploy</p> <p>docker compose exec django python manage.py shell ```</p> </li> </ol>"},{"location":"#license","title":"License","text":"<p>MIT</p>"}]}